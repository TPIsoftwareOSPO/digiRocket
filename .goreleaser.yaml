# This is an example .goreleaser.yml file with some sensible defaults.
# Make sure to check the documentation at https://goreleaser.com

# The lines below are called `modelines`. See `:help modeline`
# Feel free to remove those if you don't want/need to use them.
# yaml-language-server: $schema=https://goreleaser.com/static/schema.json
# vim: set ts=2 sw=2 tw=0 fo=cnqoj

version: 2

env:
  - GO111MODULE=on

before:
  hooks:
    # You may remove this if you don't use go modules.
    - go mod tidy

universal_binaries:
  - replace: false

builds:
  - binary: "task-compose"
    env:
      - CGO_ENABLED=0
    goos:
      - linux
      - windows
      - darwin
    goarch: # 目標 CPU 架構
      - amd64
      - arm64
    goarm: # 針對 ARMv6 和 ARMv7 (例如 Raspberry Pi)
      - "6"
      - "7"
    ldflags: # 傳遞給 Go 編譯器的連結旗標，用於注入版本、Commit 等資訊
      - -s -w # 移除符號表和調試資訊，減小文件大小
      - -X 'app.Version={{.Version}}'
      - -X 'app.CommitHash={{.Commit}}'
      - -X 'app.BuildDate={{.Date}}'
      - -X 'app.ExecutionMode=CLI'
    mod_timestamp: "{{ .CommitTimestamp }}"

archives:
  - formats: ['tar.gz']
    # 壓縮包的命名模板，會根據 OS, Arch 自動生成
    # 這個模板比你提供的官方範例更簡潔，但功能相同，通常更推薦用於非複雜情況
    name_template: "{{ .ProjectName }}_{{ .Version }}_{{ .Os }}_{{ .Arch }}{{ if .Arm }}v{{ .Arm }}{{ end }}"
    # 如果 Windows 需要 .zip 格式
    format_overrides:
      - goos: windows
        formats: [zip]
    # 額外包含在壓縮包內的文件，例如 README、LICENSE
    files:
      - README.md
      - LICENSE
    # 設置壓縮包內文件的權限和時間戳 (可選，但可保持一致性)
    builds_info:
      group: root
      owner: root
      mtime: "{{ .CommitDate }}"

checksum: # 注意：舊版是 checksums，新版是 checksum (單數)
  name_template: "{{ .ProjectName }}_{{ .Version }}_checksums.txt"
  algorithm: sha256 # 建議使用 SHA256

release:
  github:
    owner: vulcanshen-tpi # **你的 GitHub 用戶名或組織名**
    name: task-compose # 你的 GitHub 儲存庫名稱
  name_template: "Release {{ .Tag }}" # Release 的標題
  # 自動生成 Changelog (根據 Git Commit 歷史)

homebrew_casks:
  - name: task-compose # 在 Homebrew 中安裝時的命令名稱 (brew install task-compose)
    repository:
      owner: vulcanshen-tpi # 你的 Homebrew Tap 儲存庫的擁有者 (通常與你 GitHub 帳號相同)
      name: homebrew-tap # 你的 Homebrew Tap 儲存庫名稱，例如 vulcanshen/homebrew-tap
      # 如果你的 Tap 是私有的，或需要額外權限，可能需要 token (通常 GitHub Actions 會自動處理)
      # token: "{{ .Env.HOMEBREW_TAP_GITHUB_TOKEN }}"
    homepage: "https://github.com/vulcanshen-tpi/task-compose" # 你的專案首頁
    description: "Designed to orchestrate and execute a series of commands based on a declarative YAML configuration file." # Homebrew Formula 的簡短描述
    license: "MIT" # 你的專案許可證
    # goos 和 goarch 通常會從 builds 中繼承，不需要額外設定

dockers:
  - id: "task-compose-docker"
    use: buildx
    goarch: amd64
    image_templates:
      - "vulcantpisoft/task-compose:{{ .Version }}-amd64" # 帶版本號的標籤
    dockerfile: Dockerfile # 指定你的 Dockerfile 路徑 (通常在專案根目錄)
    build_flag_templates: # Docker build 命令的額外旗標
      - "--pull" # 總是拉取最新的基礎影像
      - "--platform=linux/amd64" # 為了支持多架構，必須指定平台
      - "--label=org.opencontainers.image.description=Designed to orchestrate and execute a series of commands based on a declarative YAML configuration file."
      - "--label=org.opencontainers.image.created={{.Date}}"
      - "--label=org.opencontainers.image.name={{.ProjectName}}"
      - "--label=org.opencontainers.image.revision={{.FullCommit}}"
      - "--label=org.opencontainers.image.version={{.Version}}"
      - "--label=org.opencontainers.image.source={{.GitURL}}"
    extra_files:
      - README.md
      - LICENSE

docker_manifests:
  - name_template: "vulcantpisoft/task-compose:{{ .Version }}"
    image_templates:
      - "vulcantpisoft/task-compose:{{ .Version }}-amd64"
      - "vulcantpisoft/task-compose:{{ .Version }}-arm64"
  - name_template: "vulcantpisoft/task-compose:latest"
    image_templates:
      - "vulcantpisoft/task-compose:{{ .Version }}-amd64"
      - "vulcantpisoft/task-compose:{{ .Version }}-arm64"

# 快照發布配置 (用於本地測試，不會實際發布到 GitHub/Docker Hub)
snapshot:
  version_template: "{{ .Version }}-snapshot"

gomod:
  proxy: true

report_sizes: true

sboms:
  - artifacts: archive

changelog:
  sort: asc
  use: github
  format: "{{ .SHA }}: {{ .Message }}{{ with .AuthorUsername }} (@{{ . }}){{ end }}"
  filters:
    exclude:
      - "^test:"
      - "^test\\("
      - "^chore: update$"
      - "^chore: docs$"
      - "^docs: update$"
      - "^chore: schema$"
      - "^chore: typo$"
      - "^chore: auto-update generated files$"
      - "^chore: update schema$"
      - "^chore: schema update$"
      - "^chore\\(deps\\): "
      - "^(build|ci): "
      - "merge conflict"
      - "merge conflict"
      - Merge pull request
      - Merge remote-tracking branch
      - Merge branch
      - go mod tidy
  groups:
    - title: "New Features"
      regexp: '^.*?feat(\(.+\))??!?:.+$'
      order: 100
    - title: "Security updates"
      regexp: '^.*?sec(\(.+\))??!?:.+$'
      order: 150
    - title: "Bug fixes"
      regexp: '^.*?(fix|refactor)(\(.+\))??!?:.+$'
      order: 200
    - title: "Documentation updates"
      regexp: ^.*?docs?(\(.+\))??!?:.+$
      order: 400
    - title: Other work
      order: 9999