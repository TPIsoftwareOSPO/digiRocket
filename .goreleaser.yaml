# This is an example .goreleaser.yml file with some sensible defaults.
# Make sure to check the documentation at https://goreleaser.com

# The lines below are called `modelines`. See `:help modeline`
# Feel free to remove those if you don't want/need to use them.
# yaml-language-server: $schema=https://goreleaser.com/static/schema.json
# vim: set ts=2 sw=2 tw=0 fo=cnqoj

version: 2

project_name: task-compose
#before:
#  hooks:
#    # You may remove this if you don't use go modules.
#    - go mod tidy

builds:
  - id: "task-compose-build"
    binary: "task-compose"
    env:
      - CGO_ENABLED=0
    goos:
      - linux
      - windows
      - darwin
    goarch: # 目標 CPU 架構
      - amd64
      - arm64
    goarm: # 針對 ARMv6 和 ARMv7 (例如 Raspberry Pi)
      - "6"
      - "7"
    ldflags: # 傳遞給 Go 編譯器的連結旗標，用於注入版本、Commit 等資訊
      - -s -w # 移除符號表和調試資訊，減小文件大小
      - -X 'app.Version={{.Version}}'
      - -X 'app.CommitHash={{.Commit}}'
      - -X 'app.BuildDate={{.Date}}'
      - -X 'app.ExecutionMode=CLI'
      - -X 'main.builtBy=goreleaser' # 記錄是 goreleaser 建置的

archives:
  - id: "task-compose-archives"
    builds:
      - "task-compose-build" # 關聯到上面定義的 build id
    formats: [tar.gz]
    # this name template makes the OS and Arch compatible with the results of `uname`.
    name_template: >-
      {{ .ProjectName }}_
      {{- title .Os }}_
      {{- if eq .Arch "amd64" }}x86_64
      {{- else if eq .Arch "386" }}i386
      {{- else }}{{ .Arch }}{{ end }}
      {{- if .Arm }}v{{ .Arm }}{{ end }}
    # use zip for windows archives
    format_overrides:
      - goos: windows
        formats: [zip]
    files:
      - README.md
      - LICENSE

checksums:
  name_template: "{{ .ProjectName }}_{{ .Version }}_checksums.txt"
  algorithm: sha256 # 建議使用 SHA256

release:
  github:
    owner: vulcanshen-tpi # 你的 GitHub 用戶名或組織名
    name: task-compose # 你的 GitHub 儲存庫名稱
  name_template: "Release {{ .Tag }}" # Release 的標題
  # 自動生成 Changelog (根據 Git Commit 歷史)
  changelog:
    sort: asc # 排序方式 (升序)
    filters: # 篩選掉不希望出現在 Changelog 的 Commit 訊息
      exclude:
        - '^docs:'
        - '^test:'
        - '^chore:'
        - '^refactor:'
        - '^ci:'

brews:
  - name: task-compose # 在 Homebrew 中安裝時的命令名稱 (brew install task-compose)
    tap:
      owner: vulcanshen-tpi # 你的 Homebrew Tap 儲存庫的擁有者 (通常與你 GitHub 帳號相同)
      name: homebrew-tap # 你的 Homebrew Tap 儲存庫名稱，例如 vulcanshen/homebrew-tap
      # 如果你的 Tap 是私有的，或需要額外權限，可能需要 token (通常 GitHub Actions 會自動處理)
      # token: "{{ .Env.HOMEBREW_TAP_GITHUB_TOKEN }}"
    homepage: "https://github.com/vulcanshen-tpi/task-compose" # 你的專案首頁
    description: "Designed to orchestrate and execute a series of commands based on a declarative YAML configuration file." # Homebrew Formula 的簡短描述
    license: "MIT" # 你的專案許可證
    # goos 和 goarch 通常會從 builds 中繼承，不需要額外設定

dockers:
  - id: "task-compose-docker"
    builds:
      - "task-compose-build" # 關聯到上面定義的 build id，告訴 goreleaser 用哪個可執行檔構建 Docker 影像
    # 你的 Docker Hub 帳號/組織名稱
    image_templates:
      - "vulcantpisoft/task-compose:{{ .Version }}" # 帶版本號的標籤
      - "vulcantpisoft/task-compose:latest"      # latest 標籤
      # 為了支持多架構，建議包含 Arch 標籤
      - "vulcantpisoft/task-compose:{{ .Version }}-{{ .Arch }}"
    dockerfile: Dockerfile # 指定你的 Dockerfile 路徑 (通常在專案根目錄)
    build_flag_templates: # Docker build 命令的額外旗標
      - "--platform=linux/{{ .Arch }}" # 為了支持多架構，必須指定平台
      - "--label=org.opencontainers.image.source=https://github.com/vulcanshen-tpi/task-compose" # OCI 兼容標籤
    # 額外要複製到 Docker Context 的文件 (如果你的 Dockerfile 需要)
    extra_files:
      - README.md
      - LICENSE
      # - some_other_config.yaml

snapshots:
  name_template: "{{ .ProjectName }}_snapshot"


sboms:
  - artifacts: archive
    id: archive